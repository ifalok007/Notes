---> 	Angular Training
		1. Introduction to Angular JS
				Angular Bootstraping (manual and automatic)
					---> manual:	(using angular.botstrap() function)
							dont use ng-app with this.
							angular.element(document).ready(  //	required as angular bootstrapping must start when DOM content is fully loaded. 	
								function () { 
									angular.bootstrap(document, ['myApp']); 
								}
							);
					---> automatic	
							using ng-app
				Module Loading 
					---> Configuration blocks: - get executed during the provider registrations and configuration phase. Only providers and constants can be injected into configuration blocks. This is to prevent accidental instantiation of services before they have been fully configured.
					---> Run blocks: - get executed after the injector is created and are used to kickstart the application. Only instances and constants can be injected into run blocks. This is to prevent further system configuration during application run time.
					It is executed after all of the services have been configured and the injector has been created
					---> Injector
					---> Provider
				Steps
					1. Scripts downoading(request blocking parsing) 
					2. looks for ng-app DOMCOntentLoaded Event is emitted or document.readyState is set to 'complete' when angular.js is evealuated
					3. upon finding ng-app directive get root module name and load all dependent modules
					4. Create an application injector which will be responsible for injecting dependencies
					5. Start compilation of DOM using $compile treating ng-app as the root of compilation
				
		2.	Directive and Components
				---> isolating the scope of a directive :
						problem : We can only use directives which dont have isolated scope once within a given scope.
						separate the scope inside a directive from the scope outside, and then map the outer scope to a directive's inner scope
						
						angular.module('docsIsolateScopeDirective', [])
							.controller('Controller', ['$scope', function($scope) {
							  $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };
							  $scope.igor = { name: 'Igor', address: '123 Somewhere' };
							}])
							.directive('myCustomer', function() {
							  return {
								restrict: 'E',
								scope: {
								  customerInfo: '=bindToThis' // or just '='
								},
								templateUrl: 'my-customer-iso.html'
							  };
							});
							
						So the isolate scope of the directive isolates everything except models that you've explicitly added to the scope: {} hash object.
						Normally, a scope prototypically inherits from its parent. An isolated scope does not.
						
				---> The link function (Directive that Manipulates the DOM)
						function link(scope, element, attrs, controller, transcludeFn) { ... }
						https://plnkr.co/edit/ie3HVmL3lTPfGlkc8KWT?p=preview
				---> The transclusion (Directive that Wraps Other Elements)
						transclude:true/element
						
						pass in an entire template rather than a string or an object
						
						for ex : dialog box should be able to wrap any arbitrary content
						
						https://plnkr.co/edit/oFaNJn5KThflOOmcrQzf?p=preview
						
						This behavior makes sense for a directive that wraps some content, because otherwise you'd have to pass in each model (those models may have different structure) you wanted to use separately.
				
				---> defining output behaviour in directives:
						using & binding : & binding allows a directive to trigger evaluation of an expression in the context of the original scope.
						
						for ex : add buttons to our previous dialog box, and allow someone using the directive to bind their own behavior to it
						<my-dialog ng-hide="dialogIsHidden" on-close="hideDialog(message)">
							Check out the contents, {{name}}!
						</my-dialog>
						https://plnkr.co/edit/ovXWXkHjt3MvfVQkPGut?p=preview
		3.	Routing
			---> State Routing 
			---> 
		4.	Session and Local Storage
		5. 	Best Practices (From john papa style guide)
		
				
---> The DOMContentLoaded event :
		is fired when the initial HTML document has been completely loaded and parsed, #without waiting for stylesheets, images, and subframes to finish loading#. A very different event #load# should be used only to #detect a fully-loaded page#. It is an incredibly popular mistake to use load where #DOMContentLoaded# would be much more appropriate, so be cautious.

---> Injector :
		is responsible for retreiving objects instances registered with provider.
		---> injection annotation
				module.service('serviceName',function(depedency1,dependency2){
					//does not work with minification or obfuscation
				});
				module.service('serviceName',["depedency1","dependency2", function(depedency1,dependency2){
					//works with minification or obfuscation
				}]);
				module.service('serviceName',serviceName)
				function serviceName(depedency1,dependency2){
					this.value = 10;
					this.getValue = function(){
						return this.value;
					};
				}
				
				serviceName.$inject = ['depedency1','dependency2']
---> Providers :

		Notice that the unicorn provider is injected into the config function. This injection is done by a provider injector which is different from the regular instance injector, in that it instantiates and wires (injects) all provider instances only.

		During application bootstrap, before AngularJS goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.

		Once the configuration phase is over, interaction with providers is disallowed and the process of creating services starts. We call this part of the application life-cycle the run phase.
		
---> Factory Functions:
		In JavaScript, any function can return an object. When it does so without the new keyword, itâ€™s a factory function.